{"ast":null,"code":"var _jsxFileName = \"/home/nithin/Codes/Projects/X_dApp/src/components/Tweets.js\",\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"../stylesheet/style.css\";\nimport deleteLogo from '../images/delete.png';\nimport editLogo from '../images/edit.png';\nimport saveLogo from '../images/save.png';\nimport cancelLogo from '../images/cancel.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tweets = _ref => {\n  _s2();\n  var _s = $RefreshSig$();\n  let {\n    tweets,\n    shortAddress,\n    account,\n    deleteTweet,\n    editTweet\n  } = _ref;\n  const [editMode, setEditMode] = useState(null);\n  const [newContent, setNewContent] = useState(\"\");\n  const handleEdit = (tweetId, content, author) => {\n    _s();\n    useEffect(() => {\n      const fetchAccount = async () => {\n        // Assume you have a function to get the account\n        const fetchedAccount = await getAccount();\n        setAccount(fetchedAccount);\n        // Save the account to a variable\n        const requestSenderAccount = fetchedAccount;\n        // Now you can use requestSenderAccount wherever you need it\n      };\n      fetchAccount();\n    }, []);\n    if (auth) {\n      setEditMode(tweetId);\n      setNewContent(content);\n    }\n  };\n  _s(handleEdit, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  const handleSaveEdit = tweetId => {\n    editTweet(tweetId, newContent);\n    setEditMode(null);\n    setNewContent(\"\");\n  };\n  const renderEditButtons = tweet => {\n    if (editMode === tweet.id) {\n      return null; // Don't render edit and delete buttons during editing\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweet-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEdit(tweet.id, tweet.content, tweet.author),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: editLogo,\n            alt: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteTweet(tweet.id),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: deleteLogo,\n            alt: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"tweetsContainer\",\n    children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tweet\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"user-icon\",\n        src: \"https://api.multiavatar.com/\".concat(tweet.author, \".svg\"),\n        alt: \"User Icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweet-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"author\",\n          children: tweet.displayName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), editMode === tweet.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editArea\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: newContent,\n            onChange: e => setNewContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSaveEdit(tweet.id),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: saveLogo,\n              alt: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditMode(null),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: cancelLogo,\n              alt: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: tweet.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), account === tweet.author && renderEditButtons(tweet), console.log(tweet)]\n    }, tweet.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s2(Tweets, \"XC8L88Fw1kXM7O7Q70c5/I+RdN0=\");\n_c = Tweets;\nexport default Tweets;\nvar _c;\n$RefreshReg$(_c, \"Tweets\");","map":{"version":3,"names":["useState","deleteLogo","editLogo","saveLogo","cancelLogo","jsxDEV","_jsxDEV","Tweets","_ref","_s2","_s","$RefreshSig$","tweets","shortAddress","account","deleteTweet","editTweet","editMode","setEditMode","newContent","setNewContent","handleEdit","tweetId","content","author","useEffect","fetchAccount","fetchedAccount","getAccount","setAccount","requestSenderAccount","auth","handleSaveEdit","renderEditButtons","tweet","id","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","concat","displayName","value","onChange","e","target","console","log","_c","$RefreshReg$"],"sources":["/home/nithin/Codes/Projects/X_dApp/src/components/Tweets.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"../stylesheet/style.css\";\nimport deleteLogo from '../images/delete.png';\nimport editLogo from '../images/edit.png';\nimport saveLogo from '../images/save.png';\nimport cancelLogo from '../images/cancel.png';\n\nconst Tweets = ({ tweets, shortAddress, account, deleteTweet, editTweet }) => {\n  const [editMode, setEditMode] = useState(null);\n  const [newContent, setNewContent] = useState(\"\");\n\n  const handleEdit = (tweetId, content,author) => {\n    useEffect(() => {\n      const fetchAccount = async () => {\n        // Assume you have a function to get the account\n        const fetchedAccount = await getAccount();\n        setAccount(fetchedAccount);\n        // Save the account to a variable\n        const requestSenderAccount = fetchedAccount;\n        // Now you can use requestSenderAccount wherever you need it\n      };\n    \n      fetchAccount();\n    }, []);\n    \n    if(auth)\n      {\n        setEditMode(tweetId);\n        setNewContent(content);\n      }\n    \n  };\n\n  const handleSaveEdit = (tweetId) => {\n    editTweet(tweetId, newContent);\n    setEditMode(null);\n    setNewContent(\"\");\n  };\n\n  const renderEditButtons = (tweet) => {\n    if (editMode === tweet.id) {\n      return null; // Don't render edit and delete buttons during editing\n    } else {\n      return (\n        <div className=\"tweet-actions\">\n          <button onClick={() => handleEdit(tweet.id, tweet.content,tweet.author)}>\n            <img src={editLogo} alt=\"Edit\" />\n          </button>\n          <button onClick={() => deleteTweet(tweet.id)}>\n            <img src={deleteLogo} alt=\"Delete\" />\n          </button>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div id=\"tweetsContainer\">\n      {tweets.map((tweet) => (\n        <div key={tweet.id} className=\"tweet\">\n          <img\n            className=\"user-icon\"\n            src={`https://api.multiavatar.com/${tweet.author}.svg`}\n            alt=\"User Icon\"\n          />\n          <div className=\"tweet-inner\">\n            <div className=\"author\">{tweet.displayName}</div>\n            {editMode === tweet.id ? (\n              <div className=\"editArea\">\n                <textarea\n                  value={newContent}\n                  onChange={(e) => setNewContent(e.target.value)}\n                />\n                <button onClick={() => handleSaveEdit(tweet.id)}>\n                  <img src={saveLogo} alt=\"Save\" />\n                </button>\n                <button onClick={() => setEditMode(null)}>\n                  <img src={cancelLogo} alt=\"Cancel\" />\n                </button>\n              </div>\n            ) : (\n              <div className=\"content\">{tweet.content}</div>\n            )}\n          </div>\n          {account === tweet.author && renderEditButtons(tweet)}\n          {console.log(tweet)}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Tweets;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}