{"ast":null,"code":"var _jsxFileName = \"/home/nithin/Codes/Projects/X_dApp/src/components/Tweets.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"../stylesheet/style.css\";\nimport deleteLogo from '../images/delete.png';\nimport editLogo from '../images/edit.png';\nimport saveLogo from '../images/save.png';\nimport cancelLogo from '../images/cancel.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tweets = _ref => {\n  _s();\n  let {\n    tweets,\n    shortAddress,\n    account,\n    deleteTweet,\n    editTweet\n  } = _ref;\n  // State to keep track of edit mode for each tweet\n  const [editModes, setEditModes] = useState({});\n  const handleEdit = (tweetId, content) => {\n    setEditModes({\n      ...editModes,\n      [tweetId]: true\n    });\n    setNewContent({\n      ...newContent,\n      [tweetId]: content\n    });\n  };\n  const handleSaveEdit = tweetId => {\n    editTweet(tweetId, newContent[tweetId]);\n    setEditModes({\n      ...editModes,\n      [tweetId]: false\n    });\n    setNewContent({\n      ...newContent,\n      [tweetId]: \"\"\n    });\n  };\n\n  // State to hold new content for editing\n  const [newContent, setNewContent] = useState({});\n  const renderEditButtons = tweet => {\n    if (editModes[tweet.id]) {\n      return null; // Don't render edit and delete buttons during editing\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweet-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEdit(tweet.id, tweet.content),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: editLogo,\n            alt: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteTweet(tweet.id),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: deleteLogo,\n            alt: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"tweetsContainer\",\n    children: tweets.map((tweet, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tweet\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"user-icon\",\n        src: \"https://api.multiavatar.com/\".concat(tweet.author, \".svg\"),\n        alt: \"User Icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweet-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"author\",\n          children: tweet.displayName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), editModes[tweet.id] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editArea\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: newContent[tweet.id],\n            onChange: e => setNewContent({\n              ...newContent,\n              [tweet.id]: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSaveEdit(tweet.id),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: saveLogo,\n              alt: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditModes({\n              ...editModes,\n              [tweet.id]: false\n            }),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: cancelLogo,\n              alt: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: tweet.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), account === tweet.author && renderEditButtons(tweet)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Tweets, \"mj0nT9Z3Qa7XxBR/ecC241hDCuw=\");\n_c = Tweets;\nexport default Tweets;\nvar _c;\n$RefreshReg$(_c, \"Tweets\");","map":{"version":3,"names":["useState","deleteLogo","editLogo","saveLogo","cancelLogo","jsxDEV","_jsxDEV","Tweets","_ref","_s","tweets","shortAddress","account","deleteTweet","editTweet","editModes","setEditModes","handleEdit","tweetId","content","setNewContent","newContent","handleSaveEdit","renderEditButtons","tweet","id","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","index","concat","author","displayName","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/home/nithin/Codes/Projects/X_dApp/src/components/Tweets.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"../stylesheet/style.css\";\nimport deleteLogo from '../images/delete.png';\nimport editLogo from '../images/edit.png';\nimport saveLogo from '../images/save.png';\nimport cancelLogo from '../images/cancel.png';\n\nconst Tweets = ({ tweets, shortAddress, account, deleteTweet, editTweet }) => {\n  // State to keep track of edit mode for each tweet\n  const [editModes, setEditModes] = useState({});\n\n  const handleEdit = (tweetId, content) => {\n    setEditModes({ ...editModes, [tweetId]: true });\n    setNewContent({ ...newContent, [tweetId]: content });\n  };\n\n  const handleSaveEdit = (tweetId) => {\n    editTweet(tweetId, newContent[tweetId]);\n    setEditModes({ ...editModes, [tweetId]: false });\n    setNewContent({ ...newContent, [tweetId]: \"\" });\n  };\n\n  // State to hold new content for editing\n  const [newContent, setNewContent] = useState({});\n\n  const renderEditButtons = (tweet) => {\n    if (editModes[tweet.id]) {\n      return null; // Don't render edit and delete buttons during editing\n    } else {\n      return (\n        <div className=\"tweet-actions\">\n          <button onClick={() => handleEdit(tweet.id, tweet.content)}>\n            <img src={editLogo} alt=\"Edit\" />\n          </button>\n          <button onClick={() => deleteTweet(tweet.id)}>\n            <img src={deleteLogo} alt=\"Delete\" />\n          </button>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div id=\"tweetsContainer\">\n      {tweets.map((tweet, index) => (\n        <div key={index} className=\"tweet\">\n          <img\n            className=\"user-icon\"\n            src={`https://api.multiavatar.com/${tweet.author}.svg`}\n            alt=\"User Icon\"\n          />\n          <div className=\"tweet-inner\">\n            <div className=\"author\">{tweet.displayName}</div>\n            {editModes[tweet.id] ? (\n              <div className=\"editArea\">\n                <textarea\n                  value={newContent[tweet.id]}\n                  onChange={(e) => setNewContent({ ...newContent, [tweet.id]: e.target.value })}\n                />\n                <button onClick={() => handleSaveEdit(tweet.id)}>\n                  <img src={saveLogo} alt=\"Save\" />\n                </button>\n                <button onClick={() => setEditModes({ ...editModes, [tweet.id]: false })}>\n                  <img src={cancelLogo} alt=\"Cancel\" />\n                </button>\n              </div>\n            ) : (\n              <div className=\"content\">{tweet.content}</div>\n            )}\n          </div>\n          {account === tweet.author && renderEditButtons(tweet)}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Tweets;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}