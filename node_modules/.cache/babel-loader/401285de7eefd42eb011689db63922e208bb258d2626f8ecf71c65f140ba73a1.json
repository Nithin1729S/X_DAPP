{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport { ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport { accountSchema, blockSchema, feeHistorySchema, logSchema, transactionReceiptSchema, accessListResultSchema, SignatureObjectSchema } from './schemas.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n});\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getSyncing(web3Context.requestManager);\n});\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getMining(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getHashRate(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getMaxPriorityFeePerGas(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBalance(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getStorageAt(web3Context, address, storageSlot) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageSlotFormatted = format({\n      format: 'uint'\n    }, storageSlot, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getCode(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let hydrated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n    return format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockTransactionCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockUncleCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getUncle(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let uncleIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const uncleIndexFormatted = format({\n      format: 'uint'\n    }, uncleIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n    return format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransaction(web3Context, transactionHash) {\n  let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultReturnFormat;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : formatTransaction(response, returnFormat, {\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => formatTransaction(transaction, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {\n      fillInputAndData: true\n    }));\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionFromBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let transactionIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionIndexFormatted = format({\n      format: 'uint'\n    }, transactionIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n    return isNullish(response) ? response : formatTransaction(response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : format(transactionReceiptSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionCount(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction(web3Context, transaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        let transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), {\n          from: getTransactionFromOrToAttr('from', web3Context, transaction),\n          to: getTransactionFromOrToAttr('to', web3Context, transaction)\n        }), ETH_DATA_FORMAT);\n        try {\n          transactionFormatted = yield sendTxHelper.populateGasPrice({\n            transaction,\n            transactionFormatted\n          });\n          yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n          sendTxHelper.emitSending(transactionFormatted);\n          let wallet;\n          if (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n          const transactionHash = yield sendTxHelper.signAndSend({\n            wallet,\n            tx: transactionFormatted\n          });\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          sendTxHelper.emitSent(transactionFormatted);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: transactionFormatted\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: transactionFormatted\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction(web3Context, signedTransaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        // Formatting signedTransaction to be send to RPC endpoint\n        const signedTransactionFormattedHex = format({\n          format: 'bytes'\n        }, signedTransaction, ETH_DATA_FORMAT);\n        const unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n        try {\n          const {\n              v,\n              r,\n              s\n            } = unSerializedTransactionWithFrom,\n            txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n          yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n          sendTxHelper.emitSending(signedTransactionFormattedHex);\n          const transactionHash = yield trySendTransaction(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          sendTxHelper.emitSent(signedTransactionFormattedHex);\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: unSerializedTransactionWithFrom\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: unSerializedTransactionWithFrom\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sign(web3Context, message, addressOrIndex) {\n  let returnFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultReturnFormat;\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    const messageFormatted = format({\n      format: 'bytes'\n    }, message, DEFAULT_RETURN_FORMAT);\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return format(SignatureObjectSchema, signed, returnFormat);\n    }\n    if (typeof addressOrIndex === 'number') {\n      throw new SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n    const response = yield ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTransaction(web3Context, transaction) {\n  let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultReturnFormat;\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTransaction(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT));\n    // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n    return isString(response) ? decodeSignedTransaction(response, returnFormat, {\n      fillInputAndData: true\n    }) : {\n      raw: format({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: formatTransaction(response.tx, returnFormat, {\n        fillInputAndData: true\n      })\n    };\n  });\n}\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function call(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultReturnFormat;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.call(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT), blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function estimateGas(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n    if (!isNullish(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = numberToHex(toBlock);\n      }\n    }\n    if (!isNullish(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = numberToHex(fromBlock);\n      }\n    }\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    });\n    return result;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getChainId(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    },\n    // Response is number in hex formatted string\n    response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getProof(web3Context, address, storageKeys) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageKeysFormatted = storageKeys.map(storageKey => format({\n      format: 'bytes'\n    }, storageKey, ETH_DATA_FORMAT));\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return format(accountSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getFeeHistory(web3Context, blockCount) {\n  let newestBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let rewardPercentiles = arguments.length > 3 ? arguments[3] : undefined;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockCountFormatted = format({\n      format: 'uint'\n    }, blockCount, ETH_DATA_FORMAT);\n    const newestBlockFormatted = isBlockTag(newestBlock) ? newestBlock : format({\n      format: 'uint'\n    }, newestBlock, ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = format({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, NUMBER_DATA_FORMAT);\n    const response = yield ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return format(feeHistorySchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function createAccessList(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.createAccessList(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT), blockNumberFormatted);\n    return format(accessListResultSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}","map":{"version":3,"names":["ETH_DATA_FORMAT","DEFAULT_RETURN_FORMAT","Web3PromiEvent","format","hexToBytes","bytesToUint8Array","numberToHex","TransactionFactory","isBlockTag","isBytes","isNullish","isString","SignatureError","ethRpcMethods","decodeSignedTransaction","accountSchema","blockSchema","feeHistorySchema","logSchema","transactionReceiptSchema","accessListResultSchema","SignatureObjectSchema","getTransactionFromOrToAttr","formatTransaction","trySendTransaction","waitForTransactionReceipt","NUMBER_DATA_FORMAT","SendTxHelper","getProtocolVersion","web3Context","__awaiter","requestManager","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashRate","returnFormat","response","defaultReturnFormat","getGasPrice","getMaxPriorityFeePerGas","getBlockNumber","getBalance","address","blockNumber","arguments","length","undefined","defaultBlock","blockNumberFormatted","getStorageAt","storageSlot","storageSlotFormatted","getCode","getBlock","block","hydrated","blockHashFormatted","getBlockByHash","getBlockByNumber","getBlockTransactionCount","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getBlockUncleCount","getUncleCountByBlockHash","getUncleCountByBlockNumber","getUncle","uncleIndex","uncleIndexFormatted","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getTransaction","transactionHash","transactionHashFormatted","getTransactionByHash","fillInputAndData","getPendingTransactions","map","transaction","getTransactionFromBlock","transactionIndex","transactionIndexFormatted","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getTransactionCount","sendTransaction","options","checkRevertBeforeSending","promiEvent","resolve","reject","setImmediate","sendTxHelper","transactionFormatted","Object","assign","from","to","populateGasPrice","emitSending","wallet","get","signAndSend","tx","emitSent","emitTransactionHash","transactionReceipt","transactionReceiptFormatted","getReceiptWithEvents","emitReceipt","handleResolve","receipt","emitConfirmation","error","handleError","sendSignedTransaction","signedTransaction","signedTransactionFormattedHex","unSerializedTransaction","fromSerializedData","unSerializedTransactionWithFrom","toJSON","getSenderAddress","toString","v","r","s","txWithoutSigParams","__rest","sendRawTransaction","sign","message","addressOrIndex","messageFormatted","_a","signed","signTransaction","raw","call","estimateGas","getLogs","filter","toBlock","fromBlock","formattedFilter","result","res","getChainId","getProof","storageKeys","storageKeysFormatted","storageKey","getFeeHistory","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","createAccessList","signTypedData","typedData","useLegacy"],"sources":["/home/nithin/Codes/Projects/X_dApp/node_modules/web3-eth/src/rpc_method_wrappers.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n\tEip712TypedData,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getMaxPriorityFeePerGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'bytes' },\n\t\tresponse as Bytes,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'bytes' },\n\t\tresponse as Bytes,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\treturn format(\n\t\tblockSchema,\n\t\tresponse as unknown as Block,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\tblockSchema,\n\t\tresponse as unknown as Block,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(\n\t\t\ttransaction as unknown as Transaction,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t{\n\t\t\t\tfillInputAndData: true,\n\t\t\t},\n\t\t),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat ?? web3Context.defaultReturnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionReceipt(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: (format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t  ) as TransactionReceipt);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\n\t\t\t\t\tlet transactionFormatted:\n\t\t\t\t\t\t| Transaction\n\t\t\t\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithFromAndToLocalWalletIndex = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttransactionFormatted = await sendTxHelper.populateGasPrice({\n\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(transactionFormatted);\n\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(\n\t\t\t\t\t\t\t\t(transactionFormatted as Transaction).from as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash: HexString = await sendTxHelper.signAndSend({\n\t\t\t\t\t\t\twallet,\n\t\t\t\t\t\t\ttx: transactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsendTxHelper.emitSent(transactionFormatted);\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { v, r, s, ...txWithoutSigParams } = unSerializedTransactionWithFrom;\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttxWithoutSigParams as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSent(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  })\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat, {\n\t\t\t\t\tfillInputAndData: true,\n\t\t\t\t}),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(\n\t\t\tlogSchema,\n\t\t\tres as unknown as Log,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\taccountSchema,\n\t\tresponse as unknown as AccountObject,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(\n\t\tfeeHistorySchema,\n\t\tresponse as unknown as FeeHistory,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(\n\t\taccessListResultSchema,\n\t\tresponse,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTypedData<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy: boolean,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTypedData(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\ttypedData,\n\t\tuseLegacy,\n\t);\n\n\treturn format({ format: 'bytes' }, response, returnFormat ?? web3Context.defaultReturnFormat);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}